from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from bot.keyboards.user import get_main_menu_keyboard, get_start_keyboard
from database.models import User, Subscription, ReferralStat, SubscriptionStatus
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime, timedelta
from services.marzban import marzban_client, generate_unique_username
from bot.config import settings
import re
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """Handle /start command"""
    await state.clear()
    
    telegram_user_id = message.from_user.id
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot, {message.from_user.first_name}!\n\n"
        f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
        f"–í–∞—à Telegram ID: {telegram_user_id}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
    )
    
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())


@router.message(Command("menu"))
async def menu_command(message: Message):
    """Handle /menu command"""
    logger.info(f"Menu command received from user {message.from_user.id}")
    await message.answer(
        "üì± **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = (
        "‚ùì **–ü–æ–º–æ—â—å**\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "‚Ä¢ /config - –ü–æ–ª—É—á–∏—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "‚Ä¢ /referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
        "‚Ä¢ /support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN:**\n"
        "1. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É (/subscription)\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (/config)\n"
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: /support"
    )
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """Handle /cancel command"""
    await state.clear()
    await message.answer(
        "‚ùå **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
        parse_mode="Markdown"
    )


async def process_referral(user: User, referral_code: str, session: AsyncSession):
    """Process referral code"""
    try:
        # Extract referrer ID from code
        match = re.match(r"ref_(\d+)", referral_code)
        if not match:
            return
        
        referrer_id = int(match.group(1))
        
        # Get referrer
        result = await session.execute(
            select(User).where(User.telegram_id == referrer_id)
        )
        referrer = result.scalar_one_or_none()
        
        if not referrer or referrer.id == user.id:
            return
        
        # Set referrer
        user.referrer_id = referrer.id
        
        # Update referral stats
        result = await session.execute(
            select(ReferralStat).where(ReferralStat.user_id == referrer.id)
        )
        referral_stat = result.scalar_one_or_none()
        
        if not referral_stat:
            referral_stat = ReferralStat(user_id=referrer.id)
            session.add(referral_stat)
        
        referral_stat.referral_count += 1
        
        await session.commit()
        logger.info(f"User {user.telegram_id} referred by {referrer.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error processing referral: {e}")


async def create_trial_subscription(user: User, session: AsyncSession):
    """Create trial subscription for new user"""
    try:
        # Create subscription in database
        subscription = Subscription(
            user_id=user.id,
            plan_type="trial",
            status=SubscriptionStatus.TRIAL,
            start_date=datetime.now(),
            end_date=datetime.now() + timedelta(days=settings.trial_days),
            is_trial=True,
            auto_renewal=False
        )
        session.add(subscription)
        
        # Create VPN config in Marzban
        async with marzban_client as client:
            marzban_username = generate_unique_username(user.telegram_id)
            marzban_user = await client.create_user(
                username=marzban_username,
                expire_days=settings.trial_days,
                note=f"Trial user: {user.telegram_id}"
            )
            
            # Save VPN config
            from database.models import VPNConfig
            vpn_config = VPNConfig(
                user_id=user.id,
                marzban_user_id=marzban_username,
                config_url=marzban_user.links[0] if marzban_user.links else None,
                is_active=True
            )
            session.add(vpn_config)
        
        await session.commit()
        logger.info(f"Created trial subscription for user {user.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error creating trial subscription: {e}")
        await session.rollback()


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    """Return to main menu"""
    await callback.message.edit_text(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.message(Command("test_routing"))
async def test_routing_command(message: Message):
    """Test command to check routing"""
    logger.info(f"test_routing_command called by user {message.from_user.id}")
    await message.answer("‚úÖ –†–æ—É—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ start_handler!")


@router.message(Command("reset_trial_simple"))
async def reset_trial_simple_command(message: Message):
    """Simple admin command for trial reset in start handler"""
    if message.from_user.id != 17499218:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    logger.info(f"reset_trial_simple_command called by user {message.from_user.id} with text: {message.text}")
    
    # Parse command arguments
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_trial_simple <telegram_id>")
        return
    
    try:
        target_telegram_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID")
        return
    
    # Use simple SQL reset
    await message.answer(f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_telegram_id}...")
    
    # Use the existing database function
    from database.connection import async_session_maker
    from database.models import User, Subscription, VPNConfig
    from sqlalchemy import select
    
    async with async_session_maker() as session:
        try:
            # Find user
            result = await session.execute(
                select(User).where(User.telegram_id == target_telegram_id)
            )
            target_user = result.scalar_one_or_none()
            
            if not target_user:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # Delete subscriptions and configs
            result = await session.execute(select(Subscription).where(Subscription.user_id == target_user.id))
            for sub in result.scalars().all():
                await session.delete(sub)
            
            result = await session.execute(select(VPNConfig).where(VPNConfig.user_id == target_user.id))  
            for config in result.scalars().all():
                await session.delete(config)
            
            # Reset trial flag
            target_user.trial_used = False
            await session.commit()
            
            await message.answer(f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.first_name or target_user.telegram_id}")
            
        except Exception as e:
            logger.error(f"Error in reset_trial_simple: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


