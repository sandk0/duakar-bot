from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from database.models import User, Subscription, SubscriptionStatus, VPNConfig
from database.connection import async_session_maker
from sqlalchemy import select
from bot.keyboards.user import get_subscription_keyboard, get_back_button, get_payment_plans_keyboard
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("subscription"))
@router.callback_query(F.data == "my_subscription")
async def show_subscription(event: Message | CallbackQuery):
    """Show user subscription info"""
    
    # Get telegram_user_id from event
    if isinstance(event, Message):
        telegram_user_id = event.from_user.id
    elif isinstance(event, CallbackQuery):
        telegram_user_id = event.from_user.id
    else:
        return
    
    # Create database session
    session = async_session_maker()
    try:
        # Get user first
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            if isinstance(event, Message):
                await event.answer(text)
            else:
                await event.message.edit_text(text)
                await event.answer()
            return
        
        # Get active subscription
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user.id)
            .where(Subscription.status.in_([SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIAL]))
            .order_by(Subscription.created_at.desc())
        )
        subscription = result.scalar_one_or_none()
        
        if subscription:
            # Calculate days left
            days_left = (subscription.end_date - datetime.now()).days
            hours_left = ((subscription.end_date - datetime.now()).total_seconds() % 86400) // 3600
            
            # Get VPN config
            result = await session.execute(
                select(VPNConfig)
                .where(VPNConfig.user_id == user.id)
                .where(VPNConfig.is_active == True)
            )
            vpn_config = result.scalar_one_or_none()
            
            # Format subscription type based on status and plan
            if subscription.status == SubscriptionStatus.TRIAL:
                sub_type = "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            else:
                # Try to get plan name from the relationship or use generic name
                try:
                    if hasattr(subscription, 'plan') and subscription.plan:
                        sub_type = f"üìÖ {subscription.plan.name}"
                    else:
                        sub_type = "üìÖ –ü–æ–¥–ø–∏—Å–∫–∞"
                except:
                    sub_type = "üìÖ –ü–æ–¥–ø–∏—Å–∫–∞"
            
            # Format status
            if subscription.status == SubscriptionStatus.ACTIVE:
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
            elif subscription.status == SubscriptionStatus.TRIAL:
                status = "üéÅ –¢—Ä–∏–∞–ª"
            else:
                status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            text = (
                f"üí≥ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ**\n\n"
                f"–¢–∏–ø: {sub_type}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–ù–∞—á–∞–ª–æ: {subscription.start_date.strftime('%d.%m.%Y')}\n"
                f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {subscription.end_date.strftime('%d.%m.%Y')}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω. {hours_left} —á.\n"
                f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if getattr(subscription, 'auto_renew', False) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            )
            
            if vpn_config:
                text += f"\nVPN —Å—Ç–∞—Ç—É—Å: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
            else:
                text += f"\nVPN —Å—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
            has_active = True
        else:
            text = (
                f"üí≥ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ**\n\n"
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                f"–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN"
            )
            has_active = False
        
        # Send or edit message
        if isinstance(event, Message):
            await event.answer(
                text,
                reply_markup=get_subscription_keyboard(has_active),
                parse_mode="Markdown"
            )
        else:
            await event.message.edit_text(
                text,
                reply_markup=get_subscription_keyboard(has_active),
                parse_mode="Markdown"
            )
            await event.answer()
    
    finally:
        await session.close()