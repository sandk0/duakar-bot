from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.connection import async_session_maker
from database.models import User
from sqlalchemy import select, update
from bot.keyboards.user import get_back_button
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

logger = logging.getLogger(__name__)
router = Router()


class SettingsStates(StatesGroup):
    """States for settings management"""
    changing_language = State()


def get_settings_keyboard(user) -> InlineKeyboardMarkup:
    """Get settings keyboard"""
    builder = InlineKeyboardBuilder()
    
    # Language setting
    current_lang = getattr(user, 'language', 'ru') or 'ru'
    lang_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if current_lang == 'ru' else "üá¨üáß English"
    builder.row(
        InlineKeyboardButton(text=f"üåê –Ø–∑—ã–∫: {lang_text}", callback_data="change_language")
    )
    
    # Notification settings
    notifications = getattr(user, 'notifications_enabled', True)
    notif_text = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if notifications else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
    builder.row(
        InlineKeyboardButton(text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notif_text}", callback_data="toggle_notifications")
    )
    
    # Auto-renewal setting
    auto_renew = getattr(user, 'auto_renew', False)
    renew_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if auto_renew else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    builder.row(
        InlineKeyboardButton(text=f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {renew_text}", callback_data="toggle_autorenew")
    )
    
    # Delete account
    builder.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")
    )
    
    # Back button
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    return builder.as_markup()


@router.callback_query(F.data == "settings")
@router.message(Command("settings"))
async def show_settings(event: Message | CallbackQuery):
    """Show user settings"""
    
    # Get telegram_user_id
    if isinstance(event, Message):
        telegram_user_id = event.from_user.id
        answer_func = event.answer
    else:
        telegram_user_id = event.from_user.id
        answer_func = event.message.edit_text
        await event.answer()
    
    session = async_session_maker()
    try:
        # Get user
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await answer_func(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            )
            return
        
        text = (
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
        )
        
        await answer_func(
            text,
            parse_mode="Markdown",
            reply_markup=get_settings_keyboard(user)
        )
        
    except Exception as e:
        logger.error(f"Error showing settings: {e}")
        await answer_func(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )
    finally:
        await session.close()


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    """Toggle notification settings"""
    telegram_user_id = callback.from_user.id
    
    session = async_session_maker()
    try:
        # Get user
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Toggle notifications
        current_state = getattr(user, 'notifications_enabled', True)
        new_state = not current_state
        
        # Update user (assuming notifications_enabled field exists)
        # If field doesn't exist, this will need to be added to the model
        await session.execute(
            update(User)
            .where(User.id == user.id)
            .values(notifications_enabled=new_state)
        )
        await session.commit()
        
        # Refresh user object
        await session.refresh(user)
        
        # Update message
        text = (
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_settings_keyboard(user)
        )
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
    except Exception as e:
        logger.error(f"Error toggling notifications: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await session.close()


@router.callback_query(F.data == "toggle_autorenew")
async def toggle_autorenew(callback: CallbackQuery):
    """Toggle auto-renewal settings"""
    telegram_user_id = callback.from_user.id
    
    session = async_session_maker()
    try:
        # Get user
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Toggle auto-renewal
        current_state = getattr(user, 'auto_renew', False)
        new_state = not current_state
        
        # Update user
        await session.execute(
            update(User)
            .where(User.id == user.id)
            .values(auto_renew=new_state)
        )
        await session.commit()
        
        # Refresh user object
        await session.refresh(user)
        
        # Update message
        text = (
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_settings_keyboard(user)
        )
        
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        await callback.answer(f"‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {status}")
        
    except Exception as e:
        logger.error(f"Error toggling auto-renewal: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await session.close()


@router.callback_query(F.data == "change_language")
async def change_language(callback: CallbackQuery):
    """Change interface language"""
    # For now, just show a message that this feature is coming soon
    await callback.answer(
        "üöß –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
        show_alert=True
    )


@router.callback_query(F.data == "delete_account")
async def delete_account_confirm(callback: CallbackQuery):
    """Confirm account deletion"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_account"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings")
    )
    
    await callback.message.edit_text(
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
        "‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
        "‚Ä¢ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_delete_account")
async def confirm_delete_account(callback: CallbackQuery):
    """Actually delete the account"""
    # For safety, we won't actually delete the account
    # In production, this would require additional confirmation
    await callback.message.edit_text(
        "üîí **–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support\n"
        "—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=get_back_button()
    )
    await callback.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)