from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from database.models import User, FAQItem, Subscription, SubscriptionStatus, VPNConfig
from database.connection import async_session_maker
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from bot.keyboards.user import get_faq_keyboard, get_support_keyboard, get_back_button
from services.marzban import marzban_client
from bot.config import settings
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("support"))
@router.callback_query(F.data == "support")
async def show_support(event: Message | CallbackQuery):
    """Show support options"""
    text = (
        f"üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏:\n\n"
        f"ü§ñ **–ê–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        f"üë®‚Äçüíª **–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É** - —Å–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º\n\n"
        f"‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:** 10:00 - 22:00 (–ú–°–ö)\n"
        f"üìû **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –¥–æ 2 —á–∞—Å–æ–≤"
    )
    
    if isinstance(event, Message):
        await event.answer(
            text,
            reply_markup=get_support_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await event.message.edit_text(
            text,
            reply_markup=get_support_keyboard(),
            parse_mode="Markdown"
        )
        await event.answer()


@router.message(Command("faq"))
@router.callback_query(F.data == "faq")
async def show_faq(event: Message | CallbackQuery):
    """Show FAQ categories"""
    # Create database session
    session = async_session_maker()
    try:
        # Get FAQ items from database
        result = await session.execute(
            select(FAQItem).where(FAQItem.is_active == True).order_by(FAQItem.order_index)
        )
        faq_items = result.scalars().all()
        
        if not faq_items:
            text = "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ FAQ"
            if isinstance(event, Message):
                await event.answer(text)
            else:
                await event.message.edit_text(text)
                await event.answer()
            return
        
        # Get FAQ categories
        result = await session.execute(
            select(FAQItem.category)
            .where(FAQItem.is_active == True)
            .distinct()
            .order_by(FAQItem.category)
        )
        categories = [row[0] for row in result.all() if row[0]]
        
        if not categories:
            # Create default FAQ if none exists
            await create_default_faq(session)
            categories = ["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–û–ø–ª–∞—Ç–∞", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"]
        
        text = (
            f"‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        
        if isinstance(event, Message):
            await event.answer(
                text,
                reply_markup=get_faq_keyboard(categories),
                parse_mode="Markdown"
            )
        else:
            await event.message.edit_text(
                text,
                reply_markup=get_faq_keyboard(categories),
                parse_mode="Markdown"
            )
            await event.answer()
    
    finally:
        await session.close()


@router.callback_query(F.data.startswith("faq_cat_"))
async def show_faq_category(callback: CallbackQuery):
    """Show FAQ items for specific category"""
    # Create database session
    session = async_session_maker()
    try:
        category = callback.data.replace("faq_cat_", "")
        
        # Get FAQ items for category
        result = await session.execute(
            select(FAQItem)
            .where(
                and_(
                    FAQItem.category == category,
                    FAQItem.is_active == True
                )
            )
            .order_by(FAQItem.order_index)
        )
        faq_items = result.scalars().all()
        
        if not faq_items:
            await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
            return
        
        text = f"‚ùì **{category}**\n\n"
        
        for i, item in enumerate(faq_items, 1):
            text += f"**{i}. {item.question}**\n{item.answer}\n\n"
        
        # Limit text length
        if len(text) > 4000:
            text = text[:4000] + "...\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_button("faq"),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        await session.close()


@router.callback_query(F.data == "autodiagnose")
async def autodiagnose(callback: CallbackQuery):
    """Perform automatic diagnosis"""
    telegram_user_id = callback.from_user.id
    
    # Create database session
    session = async_session_maker()
    try:
        await callback.answer("–í—ã–ø–æ–ª–Ω—è—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
    
        # Get user first
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                reply_markup=get_back_button("support")
            )
            return
        
        diagnosis_results = []
        
        # Check subscription status
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user.id)
            .where(Subscription.status.in_([SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIAL]))
            .order_by(Subscription.created_at.desc())
        )
        subscription = result.scalar_one_or_none()
        
        if not subscription:
            diagnosis_results.append("‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞:** –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
            recommendations = [
                "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN",
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'"
            ]
        elif subscription.end_date <= datetime.now():
            diagnosis_results.append("‚ö†Ô∏è **–ü–æ–¥–ø–∏—Å–∫–∞:** –ò—Å—Ç–µ–∫–ª–∞")
            recommendations = [
                "‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–ø–ª–∞—Ç–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å'",
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"
            ]
        else:
            days_left = (subscription.end_date - datetime.now()).days
            diagnosis_results.append(f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞:** –ê–∫—Ç–∏–≤–Ω–∞ ({days_left} –¥–Ω.)")
            recommendations = []
        
        # Check VPN config
        if subscription:
            result = await session.execute(
                select(VPNConfig)
                .where(VPNConfig.user_id == user.id)
                .where(VPNConfig.is_active == True)
            )
            vpn_config = result.scalar_one_or_none()
            
            if not vpn_config:
                diagnosis_results.append("‚ùå **VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
                recommendations.extend([
                    "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥'",
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
                ])
            else:
                diagnosis_results.append("‚úÖ **VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** –ù–∞–π–¥–µ–Ω–∞")
        
        # Check Marzban server status
        try:
            async with marzban_client as client:
                stats = await client.get_system_stats()
                diagnosis_results.append("‚úÖ **VPN —Å–µ—Ä–≤–µ—Ä:** –î–æ—Å—Ç—É–ø–µ–Ω")
                
                # Check user status in Marzban
                if subscription and vpn_config:
                    marzban_user = await client.get_user(vpn_config.marzban_user_id)
                    if marzban_user:
                        if marzban_user.status.value == "active":
                            diagnosis_results.append("‚úÖ **–°—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ:** –ê–∫—Ç–∏–≤–µ–Ω")
                        else:
                            diagnosis_results.append(f"‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ:** {marzban_user.status.value}")
                            recommendations.append("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                    else:
                        diagnosis_results.append("‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ:** –ù–µ –Ω–∞–π–¥–µ–Ω")
                        recommendations.append("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
        
        except Exception as e:
            diagnosis_results.append("‚ùå **VPN —Å–µ—Ä–≤–µ—Ä:** –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            recommendations.extend([
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ–∑–∂–µ",
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è"
            ])
            logger.error(f"Marzban connection error during diagnosis: {e}")
        
        # Compile diagnosis report
        text = "üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏**\n\n"
        text += "\n".join(diagnosis_results)
        
        if recommendations:
            text += "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            text += "\n".join(recommendations)
        else:
            text += "\n\n‚úÖ **–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!**\n"
            text += "–ï—Å–ª–∏ —É –≤–∞—Å –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            text += "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            text += "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π VPN –ø—Ä–æ—Ç–æ–∫–æ–ª"
        
        text += f"\n\nüìÖ **–í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_button("support"),
            parse_mode="Markdown"
        )
        
    finally:
        await session.close()


async def create_default_faq(session: AsyncSession):
    """Create default FAQ items"""
    default_faq = [
        {
            "category": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            "items": [
                {
                    "question": "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN?",
                    "answer": "1. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥'\n2. –°–∫–∞—á–∞–π—Ç–µ VPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                },
                {
                    "question": "–ö–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?",
                    "answer": "iOS: Shadowrocket, OneClick\nAndroid: v2rayNG, Clash\nWindows: v2rayN, Clash for Windows\nmacOS: ClashX, V2RayX"
                },
                {
                    "question": "VPN –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
                    "answer": "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π VPN –∫–ª–∏–µ–Ω—Ç\n4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n5. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
                }
            ]
        },
        {
            "category": "–û–ø–ª–∞—Ç–∞",
            "items": [
                {
                    "question": "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
                    "answer": "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–û–ø–ª–∞—Ç–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å'\n2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É"
                },
                {
                    "question": "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?",
                    "answer": "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (Visa, MasterCard, –ú–ò–†)\n‚Ä¢ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)\n‚Ä¢ –ÆMoney\n‚Ä¢ QIWI"
                },
                {
                    "question": "–ö–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞?",
                    "answer": "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                }
            ]
        },
        {
            "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
            "items": [
                {
                    "question": "–ù–∞ —Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
                    "answer": "–û–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è."
                },
                {
                    "question": "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É?",
                    "answer": "–ù–µ—Ç, –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏."
                },
                {
                    "question": "–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?",
                    "answer": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é. –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –∏ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                }
            ]
        }
    ]
    
    order_index = 0
    for category_data in default_faq:
        category = category_data["category"]
        for item_data in category_data["items"]:
            faq_item = FAQItem(
                question=item_data["question"],
                answer=item_data["answer"],
                category=category,
                order_index=order_index,
                is_active=True
            )
            session.add(faq_item)
            order_index += 1
    
    await session.commit()
    logger.info("Default FAQ created")