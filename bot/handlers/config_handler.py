from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from database.models import User, Subscription, SubscriptionStatus, VPNConfig
from database.connection import async_session_maker
from sqlalchemy import select
from bot.keyboards.user import (
    get_config_keyboard, get_platform_keyboard, get_back_button
)
from services.marzban import marzban_client, generate_config_qr
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = Router()

# Fixed handlers without kwargs dependency

@router.message(Command("config"))
@router.callback_query(F.data == "get_config")
async def get_config(event: Message | CallbackQuery):
    """Get VPN configuration"""
    logger.info(f"get_config handler called! Event type: {type(event)}")
    
    # Get telegram_user_id from event
    if isinstance(event, Message):
        telegram_user_id = event.from_user.id
    elif isinstance(event, CallbackQuery):
        telegram_user_id = event.from_user.id
    else:
        return
    
    # Create database session
    session = async_session_maker()
    try:
        # Get user first
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            if isinstance(event, Message):
                await event.answer(text)
            else:
                await event.message.edit_text(text)
                await event.answer()
            return
        
        # Check if user has active subscription
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user.id)
            .where(Subscription.status.in_([SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIAL]))
            .order_by(Subscription.created_at.desc())
        )
        subscription = result.scalar_one_or_none()
        
        if not subscription:
            text = (
                "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
            )
            if isinstance(event, Message):
                await event.answer(text, parse_mode="Markdown")
            else:
                await event.message.edit_text(text, parse_mode="Markdown")
                await event.answer()
            return
        
        # Get VPN config
        result = await session.execute(
            select(VPNConfig)
            .where(VPNConfig.user_id == user.id)
            .where(VPNConfig.is_active == True)
        )
        vpn_config = result.scalar_one_or_none()
        
        if not vpn_config or not vpn_config.config_data:
            text = (
                "‚ö†Ô∏è **VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            if isinstance(event, Message):
                await event.answer(text, parse_mode="Markdown")
            else:
                await event.message.edit_text(text, parse_mode="Markdown")
                await event.answer()
            return
        
        # Update last used
        vpn_config.updated_at = datetime.now()
        await session.commit()
        
        # Calculate subscription info
        days_left = (subscription.end_date - datetime.now()).days
        
        text = (
            f"üîë **–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è**\n\n"
            f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª: VLESS\n\n"
            f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:**\n"
            f"‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
            f"‚Ä¢ –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è\n"
            f"‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n\n"
            f"üì± **–í—ã–±–µ—Ä–∏—Ç–µ VPN-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**"
        )
        
        if isinstance(event, Message):
            await event.answer(
                text,
                reply_markup=get_config_keyboard(vpn_config.config_data),
                parse_mode="Markdown"
            )
        else:
            await event.message.edit_text(
                text,
                reply_markup=get_config_keyboard(vpn_config.config_data),
                parse_mode="Markdown"
            )
            await event.answer()
    
    finally:
        await session.close()


@router.callback_query(F.data == "show_qr")
async def show_qr_code(callback: CallbackQuery):
    """Show QR code for VPN config"""
    logger.info(f"show_qr_code handler called by user {callback.from_user.id}")
    telegram_user_id = callback.from_user.id
    
    # Create database session
    session = async_session_maker()
    try:
        # Get user first
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Get VPN config
        result = await session.execute(
            select(VPNConfig)
            .where(VPNConfig.user_id == user.id)
            .where(VPNConfig.is_active == True)
        )
        vpn_config = result.scalar_one_or_none()
        
        if not vpn_config or not vpn_config.config_data:
            await callback.answer("VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        try:
            # Generate QR code
            qr_image = generate_config_qr(vpn_config.config_data)
            
            # Create keyboard with quick action buttons
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            
            builder = InlineKeyboardBuilder()
            
            # Add button to copy config (callback instead of URL)
            builder.row(
                InlineKeyboardButton(
                    text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", 
                    callback_data="copy_link"
                )
            )
            
            
            # Add back button
            builder.row(
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="get_config")
            )
            
            # Send QR code as photo with improved caption
            caption = (
                "<b>üì± QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n"
                "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ VPN-–∫–ª–∏–µ–Ω—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∏–∑ QR-–∫–æ–¥–∞¬ª\n"
                "3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–¥ —Å —ç–∫—Ä–∞–Ω–∞\n\n"
                "üí° <i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>"
            )
            
            await callback.message.answer_photo(
                BufferedInputFile(qr_image.getvalue(), filename="vpn_config_qr.png"),
                caption=caption,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
            
            await callback.answer("‚úÖ QR-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"Error generating QR code: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞", show_alert=True)
    
    finally:
        await session.close()


@router.callback_query(F.data == "copy_link")
async def copy_config_link(callback: CallbackQuery):
    """Send config link for copying"""
    logger.info(f"copy_config_link handler called by user {callback.from_user.id}")
    telegram_user_id = callback.from_user.id
    
    # Create database session
    session = async_session_maker()
    try:
        # Get user first
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Get VPN config
        result = await session.execute(
            select(VPNConfig)
            .where(VPNConfig.user_id == user.id)
            .where(VPNConfig.is_active == True)
        )
        vpn_config = result.scalar_one_or_none()
        
        if not vpn_config or not vpn_config.config_data:
            await callback.answer("VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # Create simple back button
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="get_config")
        )
        
        # Send config with simple formatting for copying
        config_message = (
            "<b>üîó –í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>\n\n"
            "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ \"–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\"\n"
            "3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –≤ VPN-–∫–ª–∏–µ–Ω—Ç\n\n"
            "üìã <b>VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n\n"
            f"<code>{vpn_config.config_data}</code>\n\n"
            "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: v2rayNG, Shadowrocket, FoXray, V2Box, NekoBox –∏ –¥—Ä—É–≥–∏–µ</i>"
        )
        
        await callback.message.answer(
            config_message,
            reply_markup=builder.as_markup(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=False)
    
    finally:
        await session.close()


@router.callback_query(F.data == "install_guide")
async def installation_guide(callback: CallbackQuery, **kwargs):
    """Show installation guide"""
    await callback.message.edit_text(
        "üìñ **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:**\n\n"
        "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
        reply_markup=get_platform_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("guide_"))
async def show_platform_guide(callback: CallbackQuery, **kwargs):
    """Show installation guide for specific platform"""
    platform = callback.data.replace("guide_", "")
    
    guides = {
        "ios": {
            "title": "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ iOS",
            "content": (
                "**1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**\n"
                "‚Ä¢ Shadowrocket (–ø–ª–∞—Ç–Ω–æ–µ)\n"
                "‚Ä¢ OneClick (–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ)\n\n"
                "**2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:**\n"
                "‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ VLESS —Å—Å—ã–ª–∫—É –∏–∑ –±–æ—Ç–∞\n"
                "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '+' ‚Üí 'Add Server'\n"
                "‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n\n"
                "**3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å\n"
                "‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ VPN\n"
                "‚Ä¢ –ì–æ—Ç–æ–≤–æ!"
            )
        },
        "android": {
            "title": "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ Android",
            "content": (
                "**1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**\n"
                "‚Ä¢ v2rayNG (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
                "‚Ä¢ Clash for Android\n\n"
                "**2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:**\n"
                "‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ VLESS —Å—Å—ã–ª–∫—É\n"
                "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ v2rayNG\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '+' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ 'Import from Clipboard'\n\n"
                "**3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                "‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ VPN"
            )
        },
        "windows": {
            "title": "üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ Windows",
            "content": (
                "**1. –°–∫–∞—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç:**\n"
                "‚Ä¢ v2rayN (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
                "‚Ä¢ Clash for Windows\n\n"
                "**2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ v2rayN:**\n"
                "‚Ä¢ –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤\n"
                "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ v2rayN.exe\n\n"
                "**3. –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä:**\n"
                "‚Ä¢ –ü–ö–ú –ø–æ –∏–∫–æ–Ω–∫–µ –≤ —Ç—Ä–µ–µ\n"
                "‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã ‚Üí –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä VLESS\n"
                "‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –±–æ—Ç–∞\n\n"
                "**4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Å–ø–∏—Å–∫–µ\n"
                "‚Ä¢ –ü–ö–ú ‚Üí Set as active server\n"
                "‚Ä¢ HTTP –ø—Ä–æ–∫—Å–∏ ‚Üí –í–∫–ª—é—á–∏—Ç—å"
            )
        },
        "macos": {
            "title": "üçé –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ macOS",
            "content": (
                "**1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**\n"
                "‚Ä¢ ClashX (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
                "‚Ä¢ V2RayX\n\n"
                "**2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ClashX:**\n"
                "‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ .dmg —Ñ–∞–π–ª\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤ Applications\n"
                "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
                "**3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞:**\n"
                "‚Ä¢ –í –º–µ–Ω—é ClashX –≤—ã–±–µ—Ä–∏—Ç–µ Config\n"
                "‚Ä¢ Remote Config ‚Üí Manage\n"
                "‚Ä¢ Add ‚Üí –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                "**4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**\n"
                "‚Ä¢ Set as System Proxy\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            )
        }
    }
    
    guide = guides.get(platform)
    if not guide:
        await callback.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"{guide['title']}\n\n{guide['content']}",
        reply_markup=get_back_button("install_guide"),
        parse_mode="Markdown"
    )
    await callback.answer()


# Deep link handlers for VPN clients
@router.callback_query(F.data.startswith("open_"))
async def open_vpn_client(callback: CallbackQuery):
    """Handle VPN client open requests"""
    client_name = callback.data.replace("open_", "")
    telegram_user_id = callback.from_user.id
    
    # Create database session
    session = async_session_maker()
    try:
        # Get user first
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Get VPN config
        result = await session.execute(
            select(VPNConfig)
            .where(VPNConfig.user_id == user.id)
            .where(VPNConfig.is_active == True)
        )
        vpn_config = result.scalar_one_or_none()
        
        if not vpn_config or not vpn_config.config_data:
            await callback.answer("VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # Map client names to display names
        client_display_names = {
            "v2rayng": "v2rayNG (Android)",
            "foxray": "FoXray (Android)", 
            "shadowrocket": "Shadowrocket (iOS)",
            "streisand": "Streisand (iOS)",
            "v2box": "V2Box (Cross-platform)",
            "nekobox": "NekoBox (Cross-platform)",
            "v2raytun": "v2rayTUN (Cross-platform)"
        }
        
        display_name = client_display_names.get(client_name, client_name)
        
        # Send config with instructions
        message = (
            f"üì± **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {display_name}**\n\n"
            f"**–®–∞–≥ 1:** –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n"
            f"**–®–∞–≥ 2:** –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {display_name}\n"
            f"**–®–∞–≥ 3:** –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\n\n"
            f"üîó **VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n"
            f"`{vpn_config.config_data}`\n\n"
            f"üí° *–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è*"
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="get_config")
        )
        
        await callback.message.answer(
            message,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {display_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    
    finally:
        await session.close()


@router.callback_query(F.data == "reset_config")
async def reset_config(callback: CallbackQuery):
    """Reset VPN configuration"""
    telegram_user_id = callback.from_user.id
    
    # Create database session
    session = async_session_maker()
    try:
        # Get user first
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Get VPN config
        result = await session.execute(
            select(VPNConfig)
            .where(VPNConfig.user_id == user.id)
            .where(VPNConfig.is_active == True)
        )
        vpn_config = result.scalar_one_or_none()
        
        if not vpn_config:
            await callback.answer("VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        try:
            # Reset config in Marzban (revoke subscription)
            async with marzban_client as client:
                success = await client.revoke_user_subscription(vpn_config.marzban_user_id)
                
                if success:
                    # Get new config
                    new_config_data = await client.get_user_config(vpn_config.marzban_user_id)
                    if new_config_data:
                        vpn_config.config_data = new_config_data
                        await session.commit()
            
            await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞", show_alert=True)
            
            # Refresh config page
            await get_config(callback)
            
        except Exception as e:
            logger.error(f"Error resetting config: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
    
    finally:
        await session.close()