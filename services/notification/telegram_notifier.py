import logging
from typing import Dict, Any, Optional
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from bot.config import settings

logger = logging.getLogger(__name__)


class TelegramNotifier:
    """Telegram notification service"""
    
    def __init__(self):
        self.bot = Bot(token=settings.bot_token)
    
    async def send_notification(
        self,
        user_id: int,
        title: str,
        message: str,
        data: Dict[str, Any] = None
    ) -> bool:
        """Send notification via Telegram"""
        try:
            # Format message with title
            full_message = f"*{title}*\n\n{message}"
            
            # Add keyboard if needed
            reply_markup = None
            if data and 'keyboard' in data:
                reply_markup = data['keyboard']
            
            await self.bot.send_message(
                chat_id=user_id,
                text=full_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            return True
            
        except TelegramForbiddenError:
            # User blocked the bot
            logger.warning(f"User {user_id} has blocked the bot")
            return False
            
        except TelegramBadRequest as e:
            # Invalid user ID or other Telegram error
            logger.error(f"Telegram error for user {user_id}: {e}")
            return False
            
        except Exception as e:
            logger.error(f"Failed to send Telegram notification to user {user_id}: {e}")
            return False
    
    async def send_subscription_expiry_warning(
        self,
        user_id: int,
        days_remaining: int
    ) -> bool:
        """Send subscription expiry warning"""
        if days_remaining <= 0:
            title = "üö® –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
            message = ("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                      "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        elif days_remaining == 1:
            title = "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            message = ("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞.\n\n"
                      "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É.")
        else:
            title = "‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç"
            message = (f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π.\n\n"
                      "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ.")
        
        return await self.send_notification(
            user_id=user_id,
            title=title,
            message=message
        )
    
    async def send_payment_success_notification(
        self,
        user_id: int,
        amount: float,
        currency: str = 'RUB'
    ) -> bool:
        """Send payment success notification"""
        title = "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
        message = (f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {currency} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n\n"
                  "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN.")
        
        return await self.send_notification(
            user_id=user_id,
            title=title,
            message=message
        )
    
    async def send_payment_failed_notification(
        self,
        user_id: int,
        amount: float,
        currency: str = 'RUB'
    ) -> bool:
        """Send payment failed notification"""
        title = "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        message = (f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {currency}.\n\n"
                  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        
        return await self.send_notification(
            user_id=user_id,
            title=title,
            message=message
        )
    
    async def send_config_regenerated_notification(
        self,
        user_id: int
    ) -> bool:
        """Send VPN config regenerated notification"""
        title = "üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        message = ("–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n\n"
                  "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        
        return await self.send_notification(
            user_id=user_id,
            title=title,
            message=message
        )
    
    async def send_referral_bonus_notification(
        self,
        user_id: int,
        bonus_days: int,
        referred_user_name: str = None
    ) -> bool:
        """Send referral bonus notification"""
        title = "üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!"
        
        if referred_user_name:
            message = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referred_user_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n"
                      f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus_days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
        else:
            message = f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus_days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞!"
        
        return await self.send_notification(
            user_id=user_id,
            title=title,
            message=message
        )
    
    async def send_trial_activation_notification(
        self,
        user_id: int
    ) -> bool:
        """Send trial activation notification"""
        title = "üéØ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        message = ("–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                  "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.")
        
        return await self.send_notification(
            user_id=user_id,
            title=title,
            message=message
        )
    
    async def send_admin_notification(
        self,
        admin_user_id: int,
        title: str,
        message: str,
        data: Dict[str, Any] = None
    ) -> bool:
        """Send notification to admin"""
        admin_title = f"üîß [–ê–î–ú–ò–ù] {title}"
        return await self.send_notification(
            user_id=admin_user_id,
            title=admin_title,
            message=message,
            data=data
        )
    
    async def send_system_alert(
        self,
        admin_user_ids: list,
        alert_type: str,
        message: str
    ) -> int:
        """Send system alert to admins"""
        title = f"üö® –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {alert_type}"
        success_count = 0
        
        for admin_id in admin_user_ids:
            try:
                success = await self.send_admin_notification(
                    admin_user_id=admin_id,
                    title=title,
                    message=message
                )
                if success:
                    success_count += 1
            except Exception as e:
                logger.error(f"Failed to send alert to admin {admin_id}: {e}")
        
        return success_count
    
    async def close(self):
        """Close bot session"""
        try:
            await self.bot.session.close()
        except Exception as e:
            logger.error(f"Error closing Telegram notifier: {e}")