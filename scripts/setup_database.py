#!/usr/bin/env python3
"""
Setup database with initial data
"""

import asyncio
import sys
import os

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import async_session_maker, init_db
from database.models import PricingPlan, SystemSetting, FAQItem
from decimal import Decimal
import logging
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def create_default_pricing():
    """Create default pricing plans"""
    try:
        async with async_session_maker() as session:
            # Check if pricing plans already exist
            from sqlalchemy import select, func
            
            count = await session.scalar(select(func.count(PricingPlan.id)))
            if count > 0:
                logger.info("Pricing plans already exist, skipping...")
                return
            
            plans = [
                {
                    "name": "monthly",
                    "duration_days": 30,
                    "price": Decimal("299.00"),
                    "discount_percent": Decimal("0.00"),
                    "features": {"unlimited_traffic": True, "one_device": True}
                },
                {
                    "name": "quarterly", 
                    "duration_days": 90,
                    "price": Decimal("799.00"),
                    "discount_percent": Decimal("10.00"),
                    "features": {"unlimited_traffic": True, "one_device": True}
                },
                {
                    "name": "yearly",
                    "duration_days": 365,
                    "price": Decimal("2999.00"),
                    "discount_percent": Decimal("20.00"),
                    "features": {"unlimited_traffic": True, "one_device": True}
                }
            ]
            
            for plan_data in plans:
                plan = PricingPlan(
                    name=plan_data["name"],
                    duration_days=plan_data["duration_days"],
                    price=plan_data["price"],
                    discount_percent=plan_data["discount_percent"],
                    is_active=True,
                    features=json.dumps(plan_data["features"])
                )
                session.add(plan)
            
            await session.commit()
            logger.info(f"Created {len(plans)} pricing plans")
    
    except Exception as e:
        logger.error(f"Error creating pricing plans: {e}")
        raise


async def create_system_settings():
    """Create default system settings"""
    try:
        async with async_session_maker() as session:
            settings = [
                {
                    "key": "bot_settings",
                    "value": {
                        "welcome_message": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!",
                        "support_username": "@support",
                        "trial_days": 7,
                        "referral_bonus_days": 30,
                        "referral_friend_bonus_days": 7
                    }
                },
                {
                    "key": "payment_settings",
                    "value": {
                        "auto_renewal": True,
                        "retry_failed_payments": True,
                        "notification_days": [1, 2, 3]
                    }
                },
                {
                    "key": "vpn_settings",
                    "value": {
                        "protocol": "vless",
                        "max_devices_per_user": 1,
                        "sync_interval_minutes": 30
                    }
                }
            ]
            
            from sqlalchemy import select
            
            for setting_data in settings:
                # Check if setting exists
                result = await session.execute(
                    select(SystemSetting).where(SystemSetting.key == setting_data["key"])
                )
                existing = result.scalar_one_or_none()
                
                if not existing:
                    setting = SystemSetting(
                        key=setting_data["key"],
                        value=json.dumps(setting_data["value"])
                    )
                    session.add(setting)
                    logger.info(f"Created system setting: {setting_data['key']}")
            
            await session.commit()
    
    except Exception as e:
        logger.error(f"Error creating system settings: {e}")
        raise


async def create_default_faq():
    """Create default FAQ items"""
    try:
        async with async_session_maker() as session:
            from sqlalchemy import select, func
            
            count = await session.scalar(select(func.count(FAQItem.id)))
            if count > 0:
                logger.info("FAQ items already exist, skipping...")
                return
            
            faq_items = [
                {
                    "category": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    "question": "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN?",
                    "answer": "1. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥'\n2. –°–∫–∞—á–∞–π—Ç–µ VPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                    "order_index": 1
                },
                {
                    "category": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    "question": "–ö–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?",
                    "answer": "iOS: Shadowrocket, OneClick\nAndroid: v2rayNG, Clash\nWindows: v2rayN, Clash for Windows\nmacOS: ClashX, V2RayX",
                    "order_index": 2
                },
                {
                    "category": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    "question": "VPN –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
                    "answer": "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π VPN –∫–ª–∏–µ–Ω—Ç\n4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n5. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                    "order_index": 3
                },
                {
                    "category": "–û–ø–ª–∞—Ç–∞",
                    "question": "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
                    "answer": "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–û–ø–ª–∞—Ç–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å'\n2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É",
                    "order_index": 4
                },
                {
                    "category": "–û–ø–ª–∞—Ç–∞",
                    "question": "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?",
                    "answer": "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (Visa, MasterCard, –ú–ò–†)\n‚Ä¢ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)\n‚Ä¢ –ÆMoney\n‚Ä¢ QIWI",
                    "order_index": 5
                },
                {
                    "category": "–û–ø–ª–∞—Ç–∞",
                    "question": "–ö–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞?",
                    "answer": "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    "order_index": 6
                },
                {
                    "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                    "question": "–ù–∞ —Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
                    "answer": "–û–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è.",
                    "order_index": 7
                },
                {
                    "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                    "question": "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É?",
                    "answer": "–ù–µ—Ç, –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏.",
                    "order_index": 8
                },
                {
                    "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                    "question": "–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?",
                    "answer": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é. –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –∏ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
                    "order_index": 9
                }
            ]
            
            for faq_data in faq_items:
                faq_item = FAQItem(
                    category=faq_data["category"],
                    question=faq_data["question"],
                    answer=faq_data["answer"],
                    order_index=faq_data["order_index"],
                    is_active=True
                )
                session.add(faq_item)
            
            await session.commit()
            logger.info(f"Created {len(faq_items)} FAQ items")
    
    except Exception as e:
        logger.error(f"Error creating FAQ items: {e}")
        raise


async def main():
    """Main setup function"""
    try:
        logger.info("Starting database setup...")
        
        # Initialize database tables
        await init_db()
        logger.info("‚úÖ Database tables created")
        
        # Create default pricing plans
        await create_default_pricing()
        logger.info("‚úÖ Default pricing plans created")
        
        # Create system settings
        await create_system_settings()
        logger.info("‚úÖ System settings created")
        
        # Create default FAQ
        await create_default_faq()
        logger.info("‚úÖ Default FAQ items created")
        
        logger.info("\nüéâ Database setup completed successfully!")
        logger.info("Next steps:")
        logger.info("1. Create admin user: python scripts/init_admin.py <your_telegram_id>")
        logger.info("2. Configure .env file with your API keys")
        logger.info("3. Start the bot: make up")
    
    except Exception as e:
        logger.error(f"‚ùå Database setup failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())