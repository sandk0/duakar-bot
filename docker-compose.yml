version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: vpn_bot_postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: Tre21bgU
      POSTGRES_DB: vpn_bot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - vpn_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d vpn_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: vpn_bot_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - vpn_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.bot
    container_name: vpn_bot_telegram
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./bot:/app/bot
      - ./services:/app/services
      - ./database:/app/database
      - ./configs:/app/configs
    networks:
      - vpn_network
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: vpn_bot_api
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app/api
      - ./services:/app/services
      - ./database:/app/database
    networks:
      - vpn_network
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: vpn_bot_worker
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./tasks:/app/tasks
      - ./services:/app/services
      - ./database:/app/database
    networks:
      - vpn_network
    restart: unless-stopped
    command: celery -A tasks.celery_app worker --loglevel=info

  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: vpn_bot_beat
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./tasks:/app/tasks
    networks:
      - vpn_network
    restart: unless-stopped
    command: celery -A tasks.celery_app beat --loglevel=info

  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: vpn_bot_flower
    env_file:
      - .env
    depends_on:
      - redis
    ports:
      - "5555:5555"
    networks:
      - vpn_network
    restart: unless-stopped
    command: celery -A tasks.celery_app flower --port=5555

  prometheus:
    image: prom/prometheus:latest
    container_name: vpn_bot_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - vpn_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: vpn_bot_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/var/lib/grafana/dashboards/vpn-bot-dashboard.json
    ports:
      - "3000:3000"
    networks:
      - vpn_network
    restart: unless-stopped

networks:
  vpn_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
